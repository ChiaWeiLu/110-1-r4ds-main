---
title: "week 10 class"
output: html_notebook
---
```{r}
lubridate::ymd(c("2021/10/30", "2021-10-30", "2021 October 30", "2021 Oct. 30"))
lubridate::ydm(c("2021/30/10", "2021-30-10", "2021 30 October", "2021 30 Oct."))
lubridate::mdy(c("10/30/2021", "10-30-2021", "October 30, 2021", "Oct. 30, 2021"))
lubridate::dmy(c("30/10/2021", "30-10-2021", "30 October, 2021", "30 Oct., 2021"))
```

```{r}
dayInfo <- list()
dayInfo$ymd <- c("2021/10/30", "2021-10-30", "2021 October 30", "2021 Oct. 30")
class(dayInfo$ymd)
lubridate::ymd(dayInfo$ymd) ->
  dayInfo$ymd_parsed
```

```{r}
commonClasses <- list()
```
```{r}
# save three different atomic vectors
commonClasses$character <- c("John", "Mary", "Bill")
commonClasses$numeric <- c(2.3, 4, 7)
commonClasses$logical <- c(TRUE, T, F, FALSE)
```

```{r}
# A parsed date data has Date class.
commonClasses$date <- lubridate::dmy(c("30/10/2021", "30-10-2021", "30 October, 2021", "30 Oct., 2021"))
class(commonClasses$date)
```

"2021/10/30 13:22:52"
 *day style: ymd
 *time style: hms
 
```{r}
lubridate::ymd_hms(
  "2021/10/30 13:22:52",
  tz="Asia/Taipei"
) -> dateTime_taipei

dateTime_taipei
```
 
```{r}
dateTime_taipei <- 
  lubridate::ymd_hms(
    c("2021/10/30 13:22:52", "2021-10-31 1:22:52PM"),
    tz = "Asia/Taipei")
dateTime_taipei
```
 
```{r}
dateTime_london <- 
  lubridate::mdy_hm(
    c("October 30, 2021, 23:10", "Oct. 30, 2021 11:10PM"),
    tz="Europe/London")
dateTime_london
```
 
```{r}
c(
  dateTime_taipei, # name call on dateTime_taipei
  dateTime_london # name call on dateTime_london
) # can form an atomic vector since they share the same class.
```

```{r}
commonClasses$date_time <- c(
  dateTime_taipei,
  dateTime_london
)
class(commonClasses$date_time)
```
 
```{r}
dateTime_london # name call on dateTime_london
dateTime_london_atTaipei <-
  lubridate::with_tz(
    dateTime_london, #must be a date/time class
    tz="Asia/Taipei"
  )
dateTime_london
dateTime_london_atTaipei
```
 
```{r}
lubridate::with_tz(
  c("October 30, 2021, 23:10", "Oct. 30, 2021 1:10AM"),
  tz="Asia/Taipei"
)
```
 
```{r}
survey_fbf <-
  list(
    age=c(54, 32, 28, 20), # age
    gender=c("male", "female", "female", "male"), # gender
    residence=c("north", "south", "east", "east"), # residence
    income=c(100, 25, NA, 77) # income
  )
```
 
```{r}
survey_df <-
  data.frame(
    survey_fbf ï¼ƒ name call on survey_fbf
  )
```

```{r}
class(survey_fbf)
class(survey_df)
```

```{r}
commonClasses <- list() #declare
commonClasses$data_frame <- survey_df
```

```{r}
survey_fbf
survey_df
```

**
feature factors not all atomic vectors--some are list

```{r}
survey_fbf2 <-
  list(
    age=list(54, 32, 28, 20), # age
    gender=list("male", "female", "female", "male"), # gender
    residence=list("north", "south", "east", "east"), # residence
    income=list(100, 25, NA, 77) # income
  )
```

```{r}
df_survey_fbf2 <- 
  list2DF(survey_fbf2)
```

data frame is an extended class from ilst. It inherits all the features of list.

```{r}
survey_fbf$age
df_survey_fbf <- data.frame(survey_fbf)
df_survey_fbf$age
```

 - inheritance feature from Object-Oriented Programming (OOP)
 
```{r}
# LIST 
survey_fbf2$age
# data frame 
df_survey_fbf2$age
```

```{r}
df_survey_fbf
df_survey_fbf2
```

```{r}
[.row , .col] # is an extension from [] extraction. 
```

```{r}
commonClasses$data_frame
commonClasses$data_frame[2, "age"]
commonClasses$data_frame[c(1,4), c("income","age")]
```

* [], [.row, .col] will return value with a structure as the source.

```{r}
# Remove
commonClasses$data_frame
commonClasses$data_frame[, -c(2)]
# Replace
commonClasses$data_frame
commonClasses$data_frame[2, c( "age","income")]

commonClasses$data_frame[2, c( "age","income")] <- 
  data.frame(
    age=c(31),
    income=c(22)
  )

commonClasses$data_frame[c(1,2), c( "age","income")] 
commonClasses$data_frame[c(1,2), c("age", "income")] <- data.frame(
  c(10, 15),
  c(10, 15)
)
# Add
commonClasses$data_frame[, "age"] # take one existing column to observe its structure, which is c(...)
commonClasses$data_frame[, "isStudent"] <- data.frame(isStudent=c(T, T, F, T))
commonClasses$data_frame[, "isStudent"] <-
  c(T, T, F, T)
commonClasses$data_frame[, "isStudent"]
```

```{r}
# a list
survey_fbf
#a data frame
survey_df[2,c(1,3)]
```

# 4.2.5 Matrix
```{r}
commonClasses$matrix <- matrix(
  c(2, 11, -1, 3, 4, -5), nrow=2, 
  byrow = T # default is by column
)

commonClasses$data_frame$matrix

class(commonClasses$matrix)
```

``{r}
# non atomic matrix
matrix_nonAtomic <- matrix(
  list(
    32, "John", 
    33, "Jane", 
    34, "Ben"
    ), nrow=2
)
matrix_nonAtomic
```
